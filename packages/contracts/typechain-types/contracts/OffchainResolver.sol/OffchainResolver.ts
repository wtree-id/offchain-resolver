/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export interface OffchainResolverInterface extends Interface {
  getFunction(
    nameOrSignature: 'makeSignatureHash' | 'resolve' | 'resolveWithProof' | 'signers' | 'supportsInterface' | 'url',
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: 'NewSigners'): EventFragment;

  encodeFunctionData(
    functionFragment: 'makeSignatureHash',
    values: [AddressLike, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'resolve', values: [BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: 'resolveWithProof', values: [BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: 'signers', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'url', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'makeSignatureHash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolveWithProof', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'signers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'url', data: BytesLike): Result;
}

export namespace NewSignersEvent {
  export type InputTuple = [signers: AddressLike[]];
  export type OutputTuple = [signers: string[]];
  export interface OutputObject {
    signers: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OffchainResolver extends BaseContract {
  connect(runner?: ContractRunner | null): OffchainResolver;
  waitForDeployment(): Promise<this>;

  interface: OffchainResolverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  makeSignatureHash: TypedContractMethod<
    [target: AddressLike, expires: BigNumberish, request: BytesLike, result: BytesLike],
    [string],
    'view'
  >;

  resolve: TypedContractMethod<[name: BytesLike, data: BytesLike], [string], 'view'>;

  resolveWithProof: TypedContractMethod<[response: BytesLike, extraData: BytesLike], [string], 'view'>;

  signers: TypedContractMethod<[arg0: AddressLike], [boolean], 'view'>;

  supportsInterface: TypedContractMethod<[interfaceID: BytesLike], [boolean], 'view'>;

  url: TypedContractMethod<[], [string], 'view'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(
    nameOrSignature: 'makeSignatureHash',
  ): TypedContractMethod<
    [target: AddressLike, expires: BigNumberish, request: BytesLike, result: BytesLike],
    [string],
    'view'
  >;
  getFunction(nameOrSignature: 'resolve'): TypedContractMethod<[name: BytesLike, data: BytesLike], [string], 'view'>;
  getFunction(
    nameOrSignature: 'resolveWithProof',
  ): TypedContractMethod<[response: BytesLike, extraData: BytesLike], [string], 'view'>;
  getFunction(nameOrSignature: 'signers'): TypedContractMethod<[arg0: AddressLike], [boolean], 'view'>;
  getFunction(nameOrSignature: 'supportsInterface'): TypedContractMethod<[interfaceID: BytesLike], [boolean], 'view'>;
  getFunction(nameOrSignature: 'url'): TypedContractMethod<[], [string], 'view'>;

  getEvent(
    key: 'NewSigners',
  ): TypedContractEvent<NewSignersEvent.InputTuple, NewSignersEvent.OutputTuple, NewSignersEvent.OutputObject>;

  filters: {
    'NewSigners(address[])': TypedContractEvent<
      NewSignersEvent.InputTuple,
      NewSignersEvent.OutputTuple,
      NewSignersEvent.OutputObject
    >;
    NewSigners: TypedContractEvent<
      NewSignersEvent.InputTuple,
      NewSignersEvent.OutputTuple,
      NewSignersEvent.OutputObject
    >;
  };
}
